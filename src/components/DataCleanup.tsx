import { useState } from 'react'\nimport { useRealtimeStore } from '../stores/RealtimeStore'\nimport { loadDB } from '../store'\nimport App from '../App'\n\nexport default function DataCleanup() {\n  const [status, setStatus] = useState('')\n  const [isProcessing, setIsProcessing] = useState(false)\n  const realtimeStore = useRealtimeStore()\n  const localDB = loadDB()\n\n  const analyzeData = () => {\n    const realtimeProblems = realtimeStore.problems.length\n    const localProblems = localDB.problems.length\n    const realtimeLogs = realtimeStore.reviewLogs.length\n    const localLogs = localDB.reviewLogs.length\n    \n    setStatus(`\n📊 データ分析結果:\n🚀 Firestore: 問題${realtimeProblems}件、ログ${realtimeLogs}件\n💾 LocalStorage: 問題${localProblems}件、ログ${localLogs}件\n\n${localProblems > 0 ? '⚠️ ローカルデータが残っています' : '✅ ローカルデータはクリア済み'}\n`)\n  }\n\n  const clearLocalStorage = async () => {\n    if (!confirm('ローカルStorageのデータをクリアします。\\n\\n⚠️ この操作は元に戻せません！\\nリアルタイムデータは保持されます。\\n\\n続行しますか？')) {\n      return\n    }\n    \n    setIsProcessing(true)\n    try {\n      // バックアップを作成\n      const currentData = localStorage.getItem('review-app-db-v1')\n      if (currentData) {\n        const backup = JSON.parse(currentData)\n        const backupBlob = new Blob([JSON.stringify(backup, null, 2)], { type: 'application/json' })\n        const backupUrl = URL.createObjectURL(backupBlob)\n        const backupLink = document.createElement('a')\n        backupLink.href = backupUrl\n        backupLink.download = `local-backup-${new Date().toISOString().split('T')[0]}.json`\n        document.body.appendChild(backupLink)\n        backupLink.click()\n        document.body.removeChild(backupLink)\n        URL.revokeObjectURL(backupUrl)\n        \n        setStatus(prevStatus => prevStatus + '\\n📦 バックアップファイルをダウンロードしました')\n      }\n      \n      // LocalStorageをクリア\n      localStorage.removeItem('review-app-db-v1')\n      \n      setStatus(prevStatus => prevStatus + '\\n✅ ローカルStorageをクリアしました')\n      \n      // ページリロードを促す\n      setTimeout(() => {\n        if (confirm('データクリアが完了しました。\\nページを再読み込みして変更を反映しますか？')) {\n          window.location.reload()\n        }\n      }, 1000)\n      \n    } catch (error) {\n      setStatus(prevStatus => prevStatus + '\\n❌ エラー: ' + (error instanceof Error ? error.message : String(error)))\n    } finally {\n      setIsProcessing(false)\n    }\n  }\n\n  const forceReload = () => {\n    window.location.reload()\n  }\n\n  return (\n    <App>\n      <h2>🧹 データクリーンアップ</h2>\n      \n      <div className=\"card\" style={{backgroundColor: '#fff3cd', border: '2px solid #ffc107'}}>\n        <h3>⚠️ 緊急用データクリーンアップツール</h3>\n        <p>古い問題が削除・編集できない場合に使用してください。</p>\n      </div>\n\n      <div className=\"card\">\n        <h4>📊 データ状況確認</h4>\n        <button \n          className=\"button secondary\" \n          onClick={analyzeData}\n          style={{marginBottom: 16}}\n        >\n          🔍 データを分析\n        </button>\n        \n        {status && (\n          <pre style={{\n            backgroundColor: '#f8f9fa',\n            padding: 16,\n            borderRadius: 4,\n            border: '1px solid #dee2e6',\n            whiteSpace: 'pre-wrap',\n            fontSize: 14\n          }}>\n            {status}\n          </pre>\n        )}\n      </div>\n\n      <div className=\"card\" style={{backgroundColor: '#f8d7da', border: '2px solid #dc3545'}}>\n        <h4>🗑️ ローカルStorageクリーンアップ</h4>\n        <p><strong>⚠️ 危険な操作:</strong> ローカルに残った古いデータを完全削除します。</p>\n        <ul style={{marginLeft: 20, fontSize: 14}}>\n          <li>✅ リアルタイムデータ（Firestore）は保持されます</li>\n          <li>📦 削除前に自動でバックアップファイルをダウンロード</li>\n          <li>🔄 完了後にページが再読み込みされます</li>\n        </ul>\n        \n        <button \n          className=\"button\"\n          onClick={clearLocalStorage}\n          disabled={isProcessing}\n          style={{\n            backgroundColor: '#dc3545',\n            color: 'white',\n            border: 'none',\n            padding: '12px 24px',\n            fontSize: 16,\n            marginTop: 12\n          }}\n        >\n          {isProcessing ? '⏳ 処理中...' : '🗑️ ローカルStorageをクリア'}\n        </button>\n      </div>\n\n      <div className=\"card\">\n        <h4>🔄 再読み込み</h4>\n        <p>データクリア後やエラーが続く場合に使用してください。</p>\n        <button \n          className=\"button secondary\"\n          onClick={forceReload}\n          style={{padding: '12px 24px'}}\n        >\n          🔄 ページを再読み込み\n        </button>\n      </div>\n\n      <div className=\"card\" style={{backgroundColor: '#d4edda', border: '2px solid #28a745'}}>\n        <h4>✅ 正常化後の確認手順</h4>\n        <ol style={{marginLeft: 20, lineHeight: 1.6}}>\n          <li><strong>問題一覧</strong>でデータソース選択を確認</li>\n          <li><strong>「🚀 リアルタイムデータ」</strong> のみを使用</li>\n          <li>問題の <strong>削除・編集</strong> が正常に動作することを確認</li>\n          <li>他のデバイスとの <strong>同期</strong> が正常に動作することを確認</li>\n        </ol>\n      </div>\n    </App>\n  )\n}\n