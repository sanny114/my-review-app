import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react'
import { User as FirebaseUser } from 'firebase/auth'
import { 
  collection, 
  doc, 
  addDoc, 
  updateDoc, 
  deleteDoc, 
  onSnapshot, 
  query, 
  orderBy,
  serverTimestamp,
  writeBatch
} from 'firebase/firestore'
import { db, onAuth } from '../firebase'
import { Problem, ReviewLog, RatingCode, User, AppDB } from '../types'
import { uid, nowIso } from '../utils'

// ContextÂûãÂÆöÁæ©
interface RealtimeStoreContextType {
  // Ë™çË®ºÁä∂ÊÖã
  user: FirebaseUser | null
  isLoading: boolean
  
  // „Éá„Éº„Çø
  problems: Problem[]
  reviewLogs: ReviewLog[]
  
  // Actions
  addProblem: (problem: Omit<Problem, 'id' | 'createdAt' | 'updatedAt'>) => Promise<void>
  updateProblem: (id: string, updates: Partial<Problem>) => Promise<void>
  deleteProblem: (id: string) => Promise<void>
  addReviewLog: (problemId: string, userId: User['id'], rating: RatingCode) => Promise<void>
  
  // ÁßªË°åÁî®
  migrateFromLocalStorage: () => Promise<void>
  
  // ÂæìÊù•„ÅÆAPI‰∫íÊèõÊÄß„ÅÆ„Åü„ÇÅ
  getDB: () => AppDB
}

const RealtimeStoreContext = createContext<RealtimeStoreContextType | null>(null)

// „Ç´„Çπ„Çø„É†„Éï„ÉÉ„ÇØ
export const useRealtimeStore = () => {
  const context = useContext(RealtimeStoreContext)
  if (!context) {
    throw new Error('useRealtimeStore must be used within RealtimeStoreProvider')
  }
  return context
}

// Provider „Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
export const RealtimeStoreProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<FirebaseUser | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [problems, setProblems] = useState<Problem[]>([])
  const [reviewLogs, setReviewLogs] = useState<ReviewLog[]>([])

  // Ë™çË®ºÁä∂ÊÖã„ÅÆÁõ£Ë¶ñ
  useEffect(() => {
    const unsubscribe = onAuth((firebaseUser) => {
      setUser(firebaseUser)
      setIsLoading(false)
    })
    return unsubscribe
  }, [])

  // Firestore„É™„Ç¢„É´„Çø„Ç§„É†„É™„Çπ„Éä„Éº
  useEffect(() => {
    if (!user) {
      setProblems([])
      setReviewLogs([])
      return
    }

    // ÂïèÈ°å„ÅÆ„É™„Ç¢„É´„Çø„Ç§„É†Áõ£Ë¶ñ
    const problemsQuery = query(
      collection(db, 'users', user.uid, 'problems'),
      orderBy('createdAt', 'desc')
    )
    
    const unsubscribeProblems = onSnapshot(problemsQuery, (snapshot) => {
      const problemsData: Problem[] = []
      const seenIds = new Set<string>() // ÈáçË§áÊéíÈô§Áî®
      
      snapshot.forEach((doc) => {
        const data = doc.data()
        const problem = {
          id: doc.id,
          ...data,
          createdAt: data.createdAt?.toDate?.()?.toISOString() || data.createdAt,
          updatedAt: data.updatedAt?.toDate?.()?.toISOString() || data.updatedAt,
        } as Problem
        
        // ÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØ (ÂÖÉ„ÅÆID„Åß)
        const originalId = data.id || doc.id
        if (!seenIds.has(originalId)) {
          seenIds.add(originalId)
          problemsData.push(problem)
        } else {
          console.warn('üö® ÈáçË§á„Éá„Éº„ÇøÊ§úÂá∫:', { docId: doc.id, originalId, text: data.text?.slice(0, 30) })
        }
      })
      
      console.log('üìö Problems loaded:', { total: snapshot.size, unique: problemsData.length, duplicates: snapshot.size - problemsData.length })
      setProblems(problemsData)
    })

    // „É¨„Éì„É•„Éº„É≠„Ç∞„ÅÆ„É™„Ç¢„É´„Çø„Ç§„É†Áõ£Ë¶ñ  
    const reviewLogsQuery = query(
      collection(db, 'users', user.uid, 'reviewLogs'),
      orderBy('reviewedAt', 'desc')
    )
    
    const unsubscribeReviewLogs = onSnapshot(reviewLogsQuery, (snapshot) => {
      const reviewLogsData: ReviewLog[] = []
      const seenIds = new Set<string>() // ÈáçË§áÊéíÈô§Áî®
      
      snapshot.forEach((doc) => {
        const data = doc.data()
        const log = {
          id: doc.id,
          ...data,
          reviewedAt: data.reviewedAt?.toDate?.()?.toISOString() || data.reviewedAt,
        } as ReviewLog
        
        // ÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØ (ÂÖÉ„ÅÆID„Åß)
        const originalId = data.id || doc.id
        if (!seenIds.has(originalId)) {
          seenIds.add(originalId)
          reviewLogsData.push(log)
        } else {
          console.warn('üö® ÈáçË§á„É≠„Ç∞Ê§úÂá∫:', { docId: doc.id, originalId, problemId: data.problemId })
        }
      })
      
      console.log('üìä ReviewLogs loaded:', { total: snapshot.size, unique: reviewLogsData.length, duplicates: snapshot.size - reviewLogsData.length })
      setReviewLogs(reviewLogsData)
    })

    return () => {
      unsubscribeProblems()
      unsubscribeReviewLogs()
    }
  }, [user])

  // ActionsÂÆüË£Ö
  const addProblem = async (problemData: Omit<Problem, 'id' | 'createdAt' | 'updatedAt'>) => {
    if (!user) throw new Error('User not authenticated')
    
    // undefined ÂÄ§„ÇíÈô§Âéª„Åó„Å¶„ÇØ„É™„Éº„É≥„Å™„Éá„Éº„Çø„Çí‰ΩúÊàê
    const cleanData: any = {}
    Object.keys(problemData).forEach(key => {
      const value = (problemData as any)[key]
      if (value !== undefined) {
        cleanData[key] = value
      }
    })
    
    console.log('üíæ ÂïèÈ°å‰øùÂ≠ò„Éá„Éº„Çø:', cleanData)
    
    await addDoc(collection(db, 'users', user.uid, 'problems'), {
      ...cleanData,
      createdAt: serverTimestamp(),
      updatedAt: serverTimestamp(),
    })
  }

  const updateProblem = async (id: string, updates: Partial<Problem>) => {
    if (!user) throw new Error('User not authenticated')
    
    // undefined ÂÄ§„ÇíÈô§Âéª„Åó„Å¶„ÇØ„É™„Éº„É≥„Å™„Éá„Éº„Çø„Çí‰ΩúÊàê
    const cleanUpdates: any = {}
    Object.keys(updates).forEach(key => {
      const value = (updates as any)[key]
      if (value !== undefined) {
        cleanUpdates[key] = value
      }
    })
    
    console.log('üìù ÂïèÈ°åÊõ¥Êñ∞„Éá„Éº„Çø:', { id, updates: cleanUpdates })
    
    const problemRef = doc(db, 'users', user.uid, 'problems', id)
    await updateDoc(problemRef, {
      ...cleanUpdates,
      updatedAt: serverTimestamp(),
    })
  }

  const deleteProblem = async (id: string) => {
    if (!user) throw new Error('User not authenticated')
    
    const batch = writeBatch(db)
    
    // ÂïèÈ°å„ÇíÂâäÈô§
    const problemRef = doc(db, 'users', user.uid, 'problems', id)
    batch.delete(problemRef)
    
    // Èñ¢ÈÄ£„Åô„Çã„É¨„Éì„É•„Éº„É≠„Ç∞„ÇÇÂâäÈô§
    const relatedLogs = reviewLogs.filter(log => log.problemId === id)
    relatedLogs.forEach(log => {
      const logRef = doc(db, 'users', user.uid, 'reviewLogs', log.id)
      batch.delete(logRef)
    })
    
    await batch.commit()
  }

  const addReviewLog = async (problemId: string, userId: User['id'], rating: RatingCode) => {
    if (!user) throw new Error('User not authenticated')
    
    await addDoc(collection(db, 'users', user.uid, 'reviewLogs'), {
      problemId,
      userId,
      rating,
      reviewedAt: serverTimestamp(),
    })
  }

  // LocalStorage„Åã„Çâ„ÅÆÁßªË°å
  const migrateFromLocalStorage = async () => {
    if (!user) throw new Error('User not authenticated')
    
    try {
      // Êó¢Â≠ò„ÅÆLocalStorage„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø
      const rawData = localStorage.getItem('review-app-db-v1')
      if (!rawData) {
        console.log('No local data found to migrate')
        return
      }

      const localDB: AppDB = JSON.parse(rawData)
      const batch = writeBatch(db)

      // ÂïèÈ°å„ÇíÁßªË°å
      localDB.problems.forEach((problem) => {
        const problemRef = doc(collection(db, 'users', user.uid, 'problems'))
        batch.set(problemRef, {
          ...problem,
          createdAt: new Date(problem.createdAt),
          updatedAt: new Date(problem.updatedAt),
        })
      })

      // „É¨„Éì„É•„Éº„É≠„Ç∞„ÇíÁßªË°å
      localDB.reviewLogs.forEach((log) => {
        const logRef = doc(collection(db, 'users', user.uid, 'reviewLogs'))
        batch.set(logRef, {
          ...log,
          reviewedAt: new Date(log.reviewedAt),
        })
      })

      await batch.commit()
      
      // ÁßªË°åÂÆå‰∫ÜÂæå„ÄÅLocalStorage„Çí„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Å®„Åó„Å¶ÊÆã„Åô
      localStorage.setItem('review-app-db-v1-backup', rawData)
      
      console.log('Migration completed successfully!')
      alert('„É≠„Éº„Ç´„É´„Éá„Éº„Çø„Çí„ÇØ„É©„Ç¶„Éâ„Å´ÁßªË°å„Åó„Åæ„Åó„ÅüÔºÅ„Åì„Çå„ÅßÂÖ®„Éá„Éê„Ç§„Çπ„Åß„É™„Ç¢„É´„Çø„Ç§„É†ÂêåÊúü„Åï„Çå„Åæ„Åô üéâ')
      
    } catch (error) {
      console.error('Migration failed:', error)
      alert('„Éá„Éº„ÇøÁßªË°å„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇÂÜçÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ')
    }
  }

  // ÂæìÊù•API‰∫íÊèõ„ÅÆ„Åü„ÇÅ„ÅÆgetDB
  const getDB = (): AppDB => ({
    version: '1.0.0',
    users: [
      { id: 'rin', name: '„Çä„Çì' },
      { id: 'yui', name: '„ÇÜ„ÅÑ' }
    ],
    problems,
    reviewLogs,
    appSettings: {
      fixedSubjects: ['Êº¢Â≠ó', 'ÁÆóÊï∞'],
      defaultReviewOptions: {
        repeatMistakes: true,
        repeatWithinSession: true
      },
      defaultSortOrder: 'newest'
    }
  })

  const value: RealtimeStoreContextType = {
    user,
    isLoading,
    problems,
    reviewLogs,
    addProblem,
    updateProblem,
    deleteProblem,
    addReviewLog,
    migrateFromLocalStorage,
    getDB
  }

  return (
    <RealtimeStoreContext.Provider value={value}>
      {children}
    </RealtimeStoreContext.Provider>
  )
}
